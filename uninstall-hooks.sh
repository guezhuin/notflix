#!/bin/bash
# uninstall-hooks.sh

# Couleurs pour l'affichage
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo "${BLUE}üîß Uninstalling Git hooks...${NC}"

# V√©rifier qu'on est dans un repo git
if [ ! -d ".git" ]; then
    echo "${RED}‚ùå This is not a Git repository${NC}"
    exit 1
fi

# Liste des hooks √† d√©sinstaller
hooks=("commit-msg" "pre-commit" "pre-push")

echo "${BLUE}üóëÔ∏è  Removing custom hooks...${NC}"

# Supprimer les hooks personnalis√©s
for hook in "${hooks[@]}"; do
    if [ -f ".git/hooks/$hook" ]; then
        rm ".git/hooks/$hook"
        echo "  ‚úÖ Removed $hook hook"
    else
        echo "  ‚ö†Ô∏è  $hook hook not found"
    fi
done

# Supprimer les hooks de sample s'ils existent et les recr√©er
echo "${BLUE}üîÑ Restoring default Git hooks...${NC}"

# Restaurer la configuration par d√©faut des hooks
git config --unset core.hooksPath 2>/dev/null || true
echo "  ‚úÖ Reset hooksPath to default"

# V√©rifier s'il y a des hooks sample par d√©faut √† restaurer
if [ -f ".git/hooks/commit-msg.sample" ]; then
    echo "  ‚ÑπÔ∏è  Default sample hooks are still available in .git/hooks/"
fi

# Afficher le statut final
echo ""
echo "${GREEN}‚úÖ Git hooks uninstalled successfully!${NC}"
echo ""
echo "Hooks removed:"
for hook in "${hooks[@]}"; do
    echo "  ‚Ä¢ $hook"
done
echo ""
echo "Git is now using default hook configuration."
echo ""
echo "To reinstall the hooks:"
echo "  ./setup-hooks.sh"
echo ""
echo "To check current hook status:"
echo "  ls -la .git/hooks/"