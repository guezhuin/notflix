#!/bin/sh
# .githooks/pre-push

protected_branch="main"

echo "üöÄ Running pre-push checks..."

# V√©rifier la protection de la branche
while read local_ref local_sha remote_ref remote_sha
do
    branch_name=$(echo "$remote_ref" | sed 's|refs/heads/||')

    if [ "$branch_name" = "$protected_branch" ]; then
        echo "‚ùå Direct push to '$protected_branch' branch is not allowed."
        echo "üîí This branch is protected. Please open a pull request instead."
        exit 1
    fi
done

# Changer vers le r√©pertoire backend
cd backend || exit 1

# V√©rifier la pr√©sence des fichiers requis
if [ ! -f "requirements/dev.txt" ]; then
        echo "‚ùå requirements/dev.txt not found"
        exit 1
fi

# 1. Ex√©cuter tous les tests
echo "üß™ Running full test suite..."
cd app || exit 1
if ! python -m pytest --tb=short; then
        echo "‚ùå Test suite failed. Fix the tests before pushing."
        exit 1
fi

# 2. V√©rifier la couverture de code
echo "üìä Checking code coverage..."
if ! python -m pytest --cov=. --cov-fail-under=80 --quiet > /dev/null 2>&1; then
        echo "‚ö†Ô∏è  Code coverage below 80%. Consider adding more tests."
fi

# 3. V√©rifier que le build Docker fonctionne
echo "üê≥ Testing Docker build..."
cd ../.. || exit 1
if ! docker build -t notflix-backend-test ./backend/ > /dev/null 2>&1; then
        echo "‚ùå Docker build failed."
        exit 1
fi

# 4. V√©rifier les settings de production
echo "üè≠ Checking production settings..."
cd backend/app || exit 1
if ! python manage.py check --deploy --settings=config.settings.prod > /dev/null 2>&1; then
        echo "‚ö†Ô∏è  Production settings check failed. Review before deploying."
fi

echo "‚úÖ All pre-push checks passed!"
exit 0
