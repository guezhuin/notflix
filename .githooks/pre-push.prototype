#!/bin/sh
# .githooks/pre-push

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

protected_branch="main"

echo "${BLUE}üöÄ Running pre-push checks...${NC}"

# V√©rifier la protection de la branche
while read local_ref local_sha remote_ref remote_sha
do
  branch_name=$(echo "$remote_ref" | sed 's|refs/heads/||')

  if [ "$branch_name" = "$protected_branch" ]; then
    echo "${RED}‚ùå Direct push to '$protected_branch' branch is not allowed.${NC}"
    echo "${YELLOW}üîí This branch is protected. Please open a pull request instead.${NC}"
    exit 1
  fi
done

# Changer vers le r√©pertoire backend
cd backend || exit 1

# V√©rifier la pr√©sence des fichiers requis
if [ ! -f "requirements/dev.txt" ]; then
    echo "${RED}‚ùå requirements/dev.txt not found${NC}"
    exit 1
fi

# 1. Ex√©cuter tous les tests
echo "${BLUE}üß™ Running full test suite...${NC}"
cd app || exit 1
if ! python -m pytest --tb=short; then
    echo "${RED}‚ùå Test suite failed. Fix the tests before pushing.${NC}"
    exit 1
fi

# 2. V√©rifier la couverture de code
echo "${BLUE}üìä Checking code coverage...${NC}"
if ! python -m pytest --cov=. --cov-fail-under=80 --quiet > /dev/null 2>&1; then
    echo "${YELLOW}‚ö†Ô∏è  Code coverage below 80%. Consider adding more tests.${NC}"
fi

# 3. V√©rifier que le build Docker fonctionne
echo "${BLUE}üê≥ Testing Docker build...${NC}"
cd ../.. || exit 1
if ! docker build -t notflix-backend-test ./backend/ > /dev/null 2>&1; then
    echo "${RED}‚ùå Docker build failed.${NC}"
    exit 1
fi

# 4. V√©rifier les settings de production
echo "${BLUE}üè≠ Checking production settings...${NC}"
cd backend/app || exit 1
if ! python manage.py check --deploy --settings=config.settings.prod > /dev/null 2>&1; then
    echo "${YELLOW}‚ö†Ô∏è  Production settings check failed. Review before deploying.${NC}"
fi

echo "${GREEN}‚úÖ All pre-push checks passed!${NC}"
exit 0