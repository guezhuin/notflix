#!/bin/sh

protected_branch="main"

bockPush() {
  echo "❌ Direct push to '$1' branch is not allowed."
  echo "🔒 This branch is protected. Please open a pull request instead."
  exit 1
}

checkDockerBuild() {
  if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]; then
    echo "❌ Missing arguments for Docker build check."
    exit 1
  elif [ ! -d "$3" ]; then
    echo "❌ Directory '$3' does not exist."
    exit 1
  elif [ ! -f "$3/$2" ]; then
    echo "❌ Dockerfile '$2' not found in $3."
    exit 1
  fi

  echo "🔍 Checking Docker build for '$1' in $3..."

  docker build -t $1 -f $3/$2 $3 > /dev/null 2>&1 
  if [ $? -ne 0 ]; then
    echo "❌ Docker build $1 failed."
  else
    echo "✅ Docker build $1 succeeded."
  fi
}

checkDocker() {
  checkDockerBuild "test-backend" "Dockerfile" "./backend"
  checkDockerBuild "test-frontend" "Dockerfile" "./frontend"
  checkDockerBuild "test-nginx" "Dockerfile" "./nginx"
}

checkDockerComposeBuild() {
  if [ ! -f "$1" ]; then
    echo "❌ $1 file not found."
    exit 1
  fi

  echo "🔍 Checking Docker Compose configuration..."
  docker compose -f "$1" config > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "❌ Docker Compose $1 configuration is invalid."
  else
    checkDockerComposeBuild "$1"
    echo "✅ Docker Compose $1 configuration is valid."
  fi
}

checkDockerComposeBuild() {
  if [ ! -f "$1" ]; then
    echo "❌ $1 file not found."
    exit 1
  fi

  echo "🔍 Checking Docker Compose build..."
  docker compose -f "$1" build > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "❌ Docker Compose $1 build failed."
  else
    echo "✅ Docker Compose $1 build succeeded."
  fi
}

checkDockerCompose() {
  checkDockerComposeConfig "docker-compose.dev.yml"
  checkDockerComposeConfig "docker-compose.yml"
}

cleanImages() {
  docker rmi test-backend > /dev/null 2>&1
  docker rmi test-frontend > /dev/null 2>&1
  docker rmi test-nginx > /dev/null 2>&1
}

while read local_ref local_sha remote_ref remote_sha
do
  branch_name=$(echo "$remote_ref" | sed 's|refs/heads/||')

  if [ "$branch_name" = "$protected_branch" ]; then
    bockPush $protected_branch
  else
    checkDocker
    checkDockerCompose
    cleanImages
    echo "✅ Pushing to '$branch_name' branch is allowed."
  fi
done

exit 0
